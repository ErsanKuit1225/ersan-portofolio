declare const _exports: {
    addTenantToUrl: (url: string) => string;
    doesTenantExist: (tenantId: string) => Promise<any>;
    tryAddTenant: (tenantId: string, userId: string, email: string, afterCreateTenant: () => Promise<void>) => Promise<any>;
    getGlobalDBName: (tenantId?: string | undefined) => string;
    doWithGlobalDB: (tenantId: string, cb: any) => Promise<any>;
    lookupTenantId: (userId: string) => Promise<any>;
    getTenantUser: (identifier: string) => Promise<any>;
    isUserInAppTenant: (appId: string, user: any) => boolean;
    getTenantIds: () => Promise<any>;
    DEFAULT_TENANT_ID: "default";
    closeTenancy: () => Promise<void>;
    isMultiTenant: () => string | undefined;
    getTenantIDFromAppID: (appId: string) => string | null;
    doInTenant: (tenantId: string | null, task: any) => Promise<any>;
    doInAppContext: (appId: string, task: any) => Promise<any>;
    doInIdentityContext: (identity: import("@budibase/types").IdentityContext, task: any) => Promise<any>;
    getIdentity: () => import("@budibase/types").IdentityContext | undefined;
    updateTenantId: (tenantId: string | null) => void;
    updateAppId: (appId: string) => Promise<void>;
    setGlobalDB: (tenantId: string | null) => any;
    getGlobalDB: () => any;
    isTenantIdSet: () => boolean;
    getTenantId: () => any;
    getAppId: () => any;
    getAppDB: (opts?: any) => any;
    getProdAppDB: (opts?: any) => any;
    getDevAppDB: (opts?: any) => any;
};
export = _exports;
