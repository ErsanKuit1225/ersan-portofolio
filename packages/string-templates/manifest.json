{
  "math": {
    "abs": {
      "args": [
        "a"
      ],
      "numArgs": 1,
      "description": "<p>Return the magnitude of <code>a</code>.</p>\n"
    },
    "add": {
      "args": [
        "a",
        "b"
      ],
      "numArgs": 2,
      "description": "<p>Return the sum of <code>a</code> plus <code>b</code>.</p>\n"
    },
    "avg": {
      "args": [
        "array"
      ],
      "numArgs": 1,
      "example": "handlebars {{avg \"[1, 2, 3, 4, 5]\"}} <!-- results in: '3' --> ",
      "description": "<p>Returns the average of all numbers in the given array.</p>\n"
    },
    "ceil": {
      "args": [
        "value"
      ],
      "numArgs": 1,
      "description": "<p>Get the <code>Math.ceil()</code> of the given value.</p>\n"
    },
    "divide": {
      "args": [
        "a",
        "b"
      ],
      "numArgs": 2,
      "description": "<p>Divide <code>a</code> by <code>b</code></p>\n"
    },
    "floor": {
      "args": [
        "value"
      ],
      "numArgs": 1,
      "description": "<p>Get the <code>Math.floor()</code> of the given value.</p>\n"
    },
    "minus": {
      "args": [
        "a",
        "b"
      ],
      "numArgs": 2,
      "description": "<p>Return the product of <code>a</code> minus <code>b</code>.</p>\n"
    },
    "modulo": {
      "args": [
        "a",
        "b"
      ],
      "numArgs": 2,
      "description": "<p>Get the remainder of a division operation.</p>\n"
    },
    "multiply": {
      "args": [
        "a",
        "b"
      ],
      "numArgs": 2,
      "description": "<p>Return the product of <code>a</code> times <code>b</code>.</p>\n"
    },
    "plus": {
      "args": [
        "a",
        "b"
      ],
      "numArgs": 2,
      "description": "<p>Add <code>a</code> by <code>b</code>.</p>\n"
    },
    "random": {
      "args": [
        "min",
        "max"
      ],
      "numArgs": 2,
      "description": "<p>Generate a random number between two values</p>\n"
    },
    "remainder": {
      "args": [
        "a",
        "b"
      ],
      "numArgs": 2,
      "description": "<p>Get the remainder when <code>a</code> is divided by <code>b</code>.</p>\n"
    },
    "round": {
      "args": [
        "number"
      ],
      "numArgs": 1,
      "description": "<p>Round the given number.</p>\n"
    },
    "subtract": {
      "args": [
        "a",
        "b"
      ],
      "numArgs": 2,
      "description": "<p>Return the product of <code>a</code> minus <code>b</code>.</p>\n"
    },
    "sum": {
      "args": [
        "array"
      ],
      "numArgs": 1,
      "example": "handlebars {{sum \"[1, 2, 3, 4, 5]\"}} <!-- results in: '15' --> ",
      "description": "<p>Returns the sum of all numbers in the given array.</p>\n"
    },
    "times": {
      "args": [
        "a",
        "b"
      ],
      "numArgs": 2,
      "description": "<p>Multiply number <code>a</code> by number <code>b</code>.</p>\n"
    }
  },
  "array": {
    "after": {
      "args": [
        "array",
        "n"
      ],
      "numArgs": 2,
      "example": "handlebars <!-- array: ['a', 'b', 'c'] --> {{after array 1}} <!-- results in: '[\"c\"]' --> ",
      "description": "<p>Returns all of the items in an array after the specified index. Opposite of <a href=\"#before\">before</a>.</p>\n"
    },
    "arrayify": {
      "args": [
        "value"
      ],
      "numArgs": 1,
      "example": "handlebars {{arrayify \"foo\"}} <!-- results in: [ \"foo\" ] --> ",
      "description": "<p>Cast the given <code>value</code> to an array.</p>\n"
    },
    "before": {
      "args": [
        "array",
        "n"
      ],
      "numArgs": 2,
      "example": "handlebars <!-- array: ['a', 'b', 'c'] --> {{before array 2}} <!-- results in: '[\"a\", \"b\"]' --> ",
      "description": "<p>Return all of the items in the collection before the specified count. Opposite of <a href=\"#after\">after</a>.</p>\n"
    },
    "eachIndex": {
      "args": [
        "array",
        "options"
      ],
      "numArgs": 2,
      "example": "handlebars <!-- array: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'] --> {{#eachIndex array}} {{item}} is {{index}} {{/eachIndex}} ",
      "description": "<p>Iterates the array, listing an item and the index of it.</p>\n"
    },
    "filter": {
      "args": [
        "array",
        "value",
        "options"
      ],
      "numArgs": 3,
      "example": "handlebars <!-- array: ['a', 'b', 'c'] --> {{#filter array \"foo\"}}AAA{{else}}BBB{{/filter}} <!-- results in: 'BBB' --> ",
      "description": "<p>Block helper that filters the given array and renders the block for values that evaluate to <code>true</code>, otherwise the inverse block is returned.</p>\n"
    },
    "first": {
      "args": [
        "array",
        "n"
      ],
      "numArgs": 2,
      "example": "handlebars {{first \"['a', 'b', 'c', 'd', 'e']\" 2}} <!-- results in: '[\"a\", \"b\"]' --> ",
      "description": "<p>Returns the first item, or first <code>n</code> items of an array.</p>\n"
    },
    "forEach": {
      "args": [
        "array"
      ],
      "numArgs": 1,
      "example": "handlebars <!-- accounts = [ {'name': 'John', 'email': 'john@example.com'}, {'name': 'Malcolm', 'email': 'malcolm@example.com'}, {'name': 'David', 'email': 'david@example.com'} ] --> {{#forEach accounts}} <a href=\"mailto:{{ email }}\" title=\"Send an email to {{ name }}\"> {{ name }} </a>{{#unless isLast}}, {{/unless}} {{/forEach}} ",
      "description": "<p>Iterates over each item in an array and exposes the current item in the array as context to the inner block. In addition to the current array item, the helper exposes the following variables to the inner block: - <code>index</code> - <code>total</code> - <code>isFirst</code> - <code>isLast</code> Also, <code>@index</code> is exposed as a private variable, and additional private variables may be defined as hash arguments.</p>\n"
    },
    "inArray": {
      "args": [
        "array",
        "value",
        "options"
      ],
      "numArgs": 3,
      "example": "handlebars <!-- array: ['a', 'b', 'c'] --> {{#inArray array \"d\"}} foo {{else}} bar {{/inArray}} <!-- results in: 'bar' --> ",
      "description": "<p>Block helper that renders the block if an array has the given <code>value</code>. Optionally specify an inverse block to render when the array does not have the given value.</p>\n"
    },
    "isArray": {
      "args": [
        "value"
      ],
      "numArgs": 1,
      "example": "handlebars {{isArray \"abc\"}} <!-- results in: false --> <!-- array: [1, 2, 3] --> {{isArray array}} <!-- results in: true --> ",
      "description": "<p>Returns true if <code>value</code> is an es5 array.</p>\n"
    },
    "itemAt": {
      "args": [
        "array",
        "idx"
      ],
      "numArgs": 2,
      "example": "handlebars <!-- array: ['a', 'b', 'c'] --> {{itemAt array 1}} <!-- results in: 'b' --> ",
      "description": "<p>Returns the item from <code>array</code> at index <code>idx</code>.</p>\n"
    },
    "join": {
      "args": [
        "array",
        "separator"
      ],
      "numArgs": 2,
      "example": "handlebars <!-- array: ['a', 'b', 'c'] --> {{join array}} <!-- results in: 'a, b, c' --> {{join array '-'}} <!-- results in: 'a-b-c' --> ",
      "description": "<p>Join all elements of array into a string, optionally using a given separator.</p>\n"
    },
    "equalsLength": {
      "args": [
        "value",
        "length",
        "options"
      ],
      "numArgs": 3,
      "description": "<p>Returns true if the the length of the given <code>value</code> is equal to the given <code>length</code>. Can be used as a block or inline helper.</p>\n"
    },
    "last": {
      "args": [
        "value",
        "n"
      ],
      "numArgs": 2,
      "example": "handlebars <!-- var value = ['a', 'b', 'c', 'd', 'e'] --> {{last value}} <!-- results in: ['e'] --> {{last value 2}} <!-- results in: ['d', 'e'] --> {{last value 3}} <!-- results in: ['c', 'd', 'e'] --> ",
      "description": "<p>Returns the last item, or last <code>n</code> items of an array or string. Opposite of <a href=\"#first\">first</a>.</p>\n"
    },
    "length": {
      "args": [
        "value"
      ],
      "numArgs": 1,
      "example": "handlebars {{length '[\"a\", \"b\", \"c\"]'}} <!-- results in: 3 --> <!-- results in: myArray = ['a', 'b', 'c', 'd', 'e']; --> {{length myArray}} <!-- results in: 5 --> <!-- results in: myObject = {'a': 'a', 'b': 'b'}; --> {{length myObject}} <!-- results in: 2 --> ",
      "description": "<p>Returns the length of the given string or array.</p>\n"
    },
    "lengthEqual": {
      "args": [
        "value",
        "length",
        "options"
      ],
      "numArgs": 3,
      "description": "<p>Returns true if the the length of the given <code>value</code> is equal to the given <code>length</code>. Can be used as a block or inline helper.</p>\n"
    },
    "map": {
      "args": [
        "array",
        "fn"
      ],
      "numArgs": 2,
      "example": "handlebars <!-- array: ['a', 'b', 'c'], and \"double\" is a fictitious function that duplicates letters --> {{map array double}} <!-- results in: '[\"aa\", \"bb\", \"cc\"]' --> ",
      "description": "<p>Returns a new array, created by calling <code>function</code> on each element of the given <code>array</code>. For example,</p>\n"
    },
    "pluck": {
      "args": [
        "collection",
        "prop"
      ],
      "numArgs": 2,
      "example": "handlebars // {{pluck items \"data.title\"}} <!-- results in: '[\"aa\", \"bb\", \"cc\"]' --> ",
      "description": "<p>Map over the given object or array or objects and create an array of values from the given <code>prop</code>. Dot-notation may be used (as a string) to get nested properties.</p>\n"
    },
    "reverse": {
      "args": [
        "value"
      ],
      "numArgs": 1,
      "example": "handlebars <!-- value: 'abcd' --> {{reverse value}} <!-- results in: 'dcba' --> <!-- value: ['a', 'b', 'c', 'd'] --> {{reverse value}} <!-- results in: ['d', 'c', 'b', 'a'] --> ",
      "description": "<p>Reverse the elements in an array, or the characters in a string.</p>\n"
    },
    "some": {
      "args": [
        "array",
        "iter",
        "provided"
      ],
      "numArgs": 3,
      "example": "handlebars <!-- array: [1, 'b', 3] --> {{#some array isString}} Render me if the array has a string. {{else}} Render me if it doesn't. {{/some}} <!-- results in: 'Render me if the array has a string.' --> ",
      "description": "<p>Block helper that returns the block if the callback returns true for some value in the given array.</p>\n"
    },
    "sort": {
      "args": [
        "array",
        "key"
      ],
      "numArgs": 2,
      "example": "handlebars <!-- array: ['b', 'a', 'c'] --> {{sort array}} <!-- results in: '[\"a\", \"b\", \"c\"]' --> ",
      "description": "<p>Sort the given <code>array</code>. If an array of objects is passed, you may optionally pass a <code>key</code> to sort on as the second argument. You may alternatively pass a sorting function as the second argument.</p>\n"
    },
    "sortBy": {
      "args": [
        "array",
        "props"
      ],
      "numArgs": 2,
      "example": "handlebars <!-- array: [{a: 'zzz'}, {a: 'aaa'}] --> {{sortBy array \"a\"}} <!-- results in: '[{\"a\":\"aaa\"}, {\"a\":\"zzz\"}]' --> ",
      "description": "<p>Sort an <code>array</code>. If an array of objects is passed, you may optionally pass a <code>key</code> to sort on as the second argument. You may alternatively pass a sorting function as the second argument.</p>\n"
    },
    "withAfter": {
      "args": [
        "array",
        "idx",
        "options"
      ],
      "numArgs": 3,
      "example": "handlebars <!-- array: ['a', 'b', 'c', 'd', 'e'] --> {{#withAfter array 3}} {{this}} {{/withAfter}} <!-- results in: \"de\" --> ",
      "description": "<p>Use the items in the array <em>after</em> the specified index as context inside a block. Opposite of <a href=\"#withBefore\">withBefore</a>.</p>\n"
    },
    "withBefore": {
      "args": [
        "array",
        "idx",
        "options"
      ],
      "numArgs": 3,
      "example": "handlebars <!-- array: ['a', 'b', 'c', 'd', 'e'] --> {{#withBefore array 3}} {{this}} {{/withBefore}} <!-- results in: 'ab' --> ",
      "description": "<p>Use the items in the array <em>before</em> the specified index as context inside a block. Opposite of <a href=\"#withAfter\">withAfter</a>.</p>\n"
    },
    "withFirst": {
      "args": [
        "array",
        "idx",
        "options"
      ],
      "numArgs": 3,
      "example": "handlebars <!-- array: ['a', 'b', 'c'] --> {{#withFirst array}} {{this}} {{/withFirst}} <!-- results in: 'a' --> ",
      "description": "<p>Use the first item in a collection inside a handlebars block expression. Opposite of <a href=\"#withLast\">withLast</a>.</p>\n"
    },
    "withGroup": {
      "args": [
        "array",
        "size",
        "options"
      ],
      "numArgs": 3,
      "example": "handlebars <!-- array: ['a','b','c','d','e','f','g','h'] --> {{#withGroup array 4}} {{#each this}} {{.}} {{each}} <br> {{/withGroup}} <!-- results in: --> <!-- 'a','b','c','d'<br> --> <!-- 'e','f','g','h'<br> --> ",
      "description": "<p>Block helper that groups array elements by given group <code>size</code>.</p>\n"
    },
    "withLast": {
      "args": [
        "array",
        "idx",
        "options"
      ],
      "numArgs": 3,
      "example": "handlebars <!-- array: ['a', 'b', 'c'] --> {{#withLast array}} {{this}} {{/withLast}} <!-- results in: 'c' --> ",
      "description": "<p>Use the last item or <code>n</code> items in an array as context inside a block. Opposite of <a href=\"#withFirst\">withFirst</a>.</p>\n"
    },
    "withSort": {
      "args": [
        "array",
        "prop",
        "options"
      ],
      "numArgs": 3,
      "example": "handlebars <!-- array: ['b', 'a', 'c'] --> {{#withSort array}}{{this}}{{/withSort}} <!-- results in: 'abc' --> ",
      "description": "<p>Block helper that sorts a collection and exposes the sorted collection as context inside the block.</p>\n"
    },
    "unique": {
      "args": [
        "array",
        "options"
      ],
      "numArgs": 2,
      "example": "handlebars <!-- array: ['a', 'a', 'c', 'b', 'e', 'e'] --> {{#each (unique array)}}{{.}}{{/each}} <!-- results in: 'acbe' --> ",
      "description": "<p>Block helper that return an array with all duplicate values removed. Best used along with a <a href=\"#each\">each</a> helper.</p>\n"
    }
  },
  "number": {
    "bytes": {
      "args": [
        "number"
      ],
      "numArgs": 1,
      "description": "<p>Format a number to it&#39;s equivalent in bytes. If a string is passed, it&#39;s length will be formatted and returned. <strong>Examples:</strong> - <code>&#39;foo&#39; =&gt; 3 B</code> - <code>13661855 =&gt; 13.66 MB</code> - <code>825399 =&gt; 825.39 kB</code> - <code>1396 =&gt; 1.4 kB</code></p>\n"
    },
    "addCommas": {
      "args": [
        "num"
      ],
      "numArgs": 1,
      "description": "<p>Add commas to numbers</p>\n"
    },
    "phoneNumber": {
      "args": [
        "num"
      ],
      "numArgs": 1,
      "description": "<p>Convert a string or number to a formatted phone number.</p>\n"
    },
    "toAbbr": {
      "args": [
        "number",
        "precision"
      ],
      "numArgs": 2,
      "description": "<p>Abbreviate numbers to the given number of <code>precision</code>. This for general numbers, not size in bytes.</p>\n"
    },
    "toExponential": {
      "args": [
        "number",
        "fractionDigits"
      ],
      "numArgs": 2,
      "example": "handlebars {{toExponential number digits}}; ",
      "description": "<p>Returns a string representing the given number in exponential notation.</p>\n"
    },
    "toFixed": {
      "args": [
        "number",
        "digits"
      ],
      "numArgs": 2,
      "example": "handlebars {{toFixed \"1.1234\" 2}} //=> '1.12' ",
      "description": "<p>Formats the given number using fixed-point notation.</p>\n"
    },
    "toFloat": {
      "args": [
        "number"
      ],
      "numArgs": 1,
      "description": "<p>Convert input to a float.</p>\n"
    },
    "toInt": {
      "args": [
        "number"
      ],
      "numArgs": 1,
      "description": "<p>Convert input to an integer.</p>\n"
    },
    "toPrecision": {
      "args": [
        "number",
        "precision"
      ],
      "numArgs": 2,
      "example": "handlebars {{toPrecision \"1.1234\" 2}} //=> '1.1' ",
      "description": "<p>Returns a string representing the <code>Number</code> object to the specified precision.</p>\n"
    }
  },
  "url": {
    "encodeURI": {
      "args": [
        "str"
      ],
      "numArgs": 1,
      "description": "<p>Encodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character.</p>\n"
    },
    "escape": {
      "args": [
        "str"
      ],
      "numArgs": 1,
      "description": "<p>Escape the given string by replacing characters with escape sequences. Useful for allowing the string to be used in a URL, etc.</p>\n"
    },
    "decodeURI": {
      "args": [
        "str"
      ],
      "numArgs": 1,
      "description": "<p>Decode a Uniform Resource Identifier (URI) component.</p>\n"
    },
    "url_encode": {
      "args": [],
      "numArgs": 0,
      "description": "<p>Alias for <a href=\"#encodeuri\">encodeURI</a>.</p>\n"
    },
    "url_decode": {
      "args": [],
      "numArgs": 0,
      "description": "<p>Alias for <a href=\"#decodeuri\">decodeURI</a>.</p>\n"
    },
    "urlResolve": {
      "args": [
        "base",
        "href"
      ],
      "numArgs": 2,
      "description": "<p>Take a base URL, and a href URL, and resolve them as a browser would for an anchor tag.</p>\n"
    },
    "urlParse": {
      "args": [
        "str"
      ],
      "numArgs": 1,
      "description": "<p>Parses a <code>url</code> string into an object.</p>\n"
    },
    "stripQuerystring": {
      "args": [
        "url"
      ],
      "numArgs": 1,
      "description": "<p>Strip the query string from the given <code>url</code>.</p>\n"
    },
    "stripProtocol": {
      "args": [
        "str"
      ],
      "numArgs": 1,
      "example": "handlebars <!-- url = 'http://foo.bar' --> {{stripProtocol url}} <!-- results in: '//foo.bar' --> ",
      "description": "<p>Strip protocol from a <code>url</code>. Useful for displaying media that may have an &#39;http&#39; protocol on secure connections.</p>\n"
    }
  },
  "string": {
    "append": {
      "args": [
        "str",
        "suffix"
      ],
      "numArgs": 2,
      "example": "handlebars <!-- given that \"item.stem\" is \"foo\" --> {{append item.stem \".html\"}} <!-- results in: 'foo.html' --> ",
      "description": "<p>Append the specified <code>suffix</code> to the given string.</p>\n"
    },
    "camelcase": {
      "args": [
        "string"
      ],
      "numArgs": 1,
      "example": "handlebars {{camelcase \"foo bar baz\"}}; <!-- results in: 'fooBarBaz' --> ",
      "description": "<p>camelCase the characters in the given <code>string</code>.</p>\n"
    },
    "capitalize": {
      "args": [
        "str"
      ],
      "numArgs": 1,
      "example": "handlebars {{capitalize \"foo bar baz\"}} <!-- results in: \"Foo bar baz\" --> ",
      "description": "<p>Capitalize the first word in a sentence.</p>\n"
    },
    "capitalizeAll": {
      "args": [
        "str"
      ],
      "numArgs": 1,
      "example": "handlebars {{capitalizeAll \"foo bar baz\"}} <!-- results in: \"Foo Bar Baz\" --> ",
      "description": "<p>Capitalize all words in a string.</p>\n"
    },
    "center": {
      "args": [
        "str",
        "spaces"
      ],
      "numArgs": 2,
      "description": "<p>Center a string using non-breaking spaces</p>\n"
    },
    "chop": {
      "args": [
        "string"
      ],
      "numArgs": 1,
      "example": "handlebars {{chop \"_ABC_\"}} <!-- results in: 'ABC' --> {{chop \"-ABC-\"}} <!-- results in: 'ABC' --> {{chop \" ABC \"}} <!-- results in: 'ABC' --> ",
      "description": "<p>Like trim, but removes both extraneous whitespace <strong>and non-word characters</strong> from the beginning and end of a string.</p>\n"
    },
    "dashcase": {
      "args": [
        "string"
      ],
      "numArgs": 1,
      "example": "handlebars {{dashcase \"a-b-c d_e\"}} <!-- results in: 'a-b-c-d-e' --> ",
      "description": "<p>dash-case the characters in <code>string</code>. Replaces non-word characters and periods with hyphens.</p>\n"
    },
    "dotcase": {
      "args": [
        "string"
      ],
      "numArgs": 1,
      "example": "handlebars {{dotcase \"a-b-c d_e\"}} <!-- results in: 'a.b.c.d.e' --> ",
      "description": "<p>dot.case the characters in <code>string</code>.</p>\n"
    },
    "downcase": {
      "args": [
        "string"
      ],
      "numArgs": 1,
      "example": "handlebars {{downcase \"aBcDeF\"}} <!-- results in: 'abcdef' --> ",
      "description": "<p>Lowercase all of the characters in the given string. Alias for <a href=\"#lowercase\">lowercase</a>.</p>\n"
    },
    "ellipsis": {
      "args": [
        "str",
        "length"
      ],
      "numArgs": 2,
      "example": "handlebars {{ellipsis (sanitize \"<span>foo bar baz</span>\"), 7}} <!-- results in: 'foo bar…' --> {{ellipsis \"foo bar baz\", 7}} <!-- results in: 'foo bar…' --> ",
      "description": "<p>Truncates a string to the specified <code>length</code>, and appends it with an elipsis, <code>…</code>.</p>\n"
    },
    "hyphenate": {
      "args": [
        "str"
      ],
      "numArgs": 1,
      "example": "handlebars {{hyphenate \"foo bar baz qux\"}} <!-- results in: \"foo-bar-baz-qux\" --> ",
      "description": "<p>Replace spaces in a string with hyphens.</p>\n"
    },
    "isString": {
      "args": [
        "value"
      ],
      "numArgs": 1,
      "example": "handlebars {{isString \"foo\"}} <!-- results in: 'true' --> ",
      "description": "<p>Return true if <code>value</code> is a string.</p>\n"
    },
    "lowercase": {
      "args": [
        "str"
      ],
      "numArgs": 1,
      "example": "handlebars {{lowercase \"Foo BAR baZ\"}} <!-- results in: 'foo bar baz' --> ",
      "description": "<p>Lowercase all characters in the given string.</p>\n"
    },
    "occurrences": {
      "args": [
        "str",
        "substring"
      ],
      "numArgs": 2,
      "example": "handlebars {{occurrences \"foo bar foo bar baz\" \"foo\"}} <!-- results in: 2 --> ",
      "description": "<p>Return the number of occurrences of <code>substring</code> within the given <code>string</code>.</p>\n"
    },
    "pascalcase": {
      "args": [
        "string"
      ],
      "numArgs": 1,
      "example": "handlebars {{pascalcase \"foo bar baz\"}} <!-- results in: 'FooBarBaz' --> ",
      "description": "<p>PascalCase the characters in <code>string</code>.</p>\n"
    },
    "pathcase": {
      "args": [
        "string"
      ],
      "numArgs": 1,
      "example": "handlebars {{pathcase \"a-b-c d_e\"}} <!-- results in: 'a/b/c/d/e' --> ",
      "description": "<p>path/case the characters in <code>string</code>.</p>\n"
    },
    "plusify": {
      "args": [
        "str"
      ],
      "numArgs": 1,
      "example": "handlebars {{plusify \"foo bar baz\"}} <!-- results in: 'foo+bar+baz' --> ",
      "description": "<p>Replace spaces in the given string with pluses.</p>\n"
    },
    "prepend": {
      "args": [
        "str",
        "prefix"
      ],
      "numArgs": 2,
      "example": "handlebars <!-- given that \"val\" is \"bar\" --> {{prepend val \"foo-\"}} <!-- results in: 'foo-bar' --> ",
      "description": "<p>Prepends the given <code>string</code> with the specified <code>prefix</code>.</p>\n"
    },
    "raw": {
      "args": [
        "options"
      ],
      "numArgs": 1,
      "example": "handlebars {{{{#raw}}}} {{foo}} {{{{/raw}}}} <!-- results in: '{{foo}}' --> ",
      "description": "<p>Render a block without processing mustache templates inside the block.</p>\n"
    },
    "remove": {
      "args": [
        "str",
        "substring"
      ],
      "numArgs": 2,
      "example": "handlebars {{remove \"a b a b a b\" \"a \"}} <!-- results in: 'b b b' --> ",
      "description": "<p>Remove all occurrences of <code>substring</code> from the given <code>str</code>.</p>\n"
    },
    "removeFirst": {
      "args": [
        "str",
        "substring"
      ],
      "numArgs": 2,
      "example": "handlebars {{remove \"a b a b a b\" \"a\"}} <!-- results in: ' b a b a b' --> ",
      "description": "<p>Remove the first occurrence of <code>substring</code> from the given <code>str</code>.</p>\n"
    },
    "replace": {
      "args": [
        "str",
        "a",
        "b"
      ],
      "numArgs": 3,
      "example": "handlebars {{replace \"a b a b a b\" \"a\" \"z\"}} <!-- results in: 'z b z b z b' --> ",
      "description": "<p>Replace all occurrences of substring <code>a</code> with substring <code>b</code>.</p>\n"
    },
    "replaceFirst": {
      "args": [
        "str",
        "a",
        "b"
      ],
      "numArgs": 3,
      "example": "handlebars {{replace \"a b a b a b\" \"a\" \"z\"}} <!-- results in: 'z b a b a b' --> ",
      "description": "<p>Replace the first occurrence of substring <code>a</code> with substring <code>b</code>.</p>\n"
    },
    "sentence": {
      "args": [
        "str"
      ],
      "numArgs": 1,
      "example": "handlebars {{sentence \"hello world. goodbye world.\"}} <!-- results in: 'Hello world. Goodbye world.' --> ",
      "description": "<p>Sentence case the given string</p>\n"
    },
    "snakecase": {
      "args": [
        "string"
      ],
      "numArgs": 1,
      "example": "handlebars {{snakecase \"a-b-c d_e\"}} <!-- results in: 'a_b_c_d_e' --> ",
      "description": "<p>snake_case the characters in the given <code>string</code>.</p>\n"
    },
    "split": {
      "args": [
        "string"
      ],
      "numArgs": 1,
      "example": "handlebars {{split \"a,b,c\" \",\"}} <!-- results in: ['a', 'b', 'c'] --> ",
      "description": "<p>Split <code>string</code> by the given <code>character</code>.</p>\n"
    },
    "startsWith": {
      "args": [
        "prefix",
        "testString",
        "options"
      ],
      "numArgs": 3,
      "example": "handlebars {{#startsWith \"Goodbye\" \"Hello, world!\"}} Whoops {{else}} Bro, do you even hello world? {{/startsWith}} ",
      "description": "<p>Tests whether a string begins with the given prefix.</p>\n"
    },
    "titleize": {
      "args": [
        "str"
      ],
      "numArgs": 1,
      "example": "handlebars {{titleize \"this title case\"}} <!-- results in: 'This Is Title Case' --> ",
      "description": "<p>Title case the given string.</p>\n"
    },
    "trim": {
      "args": [
        "string"
      ],
      "numArgs": 1,
      "example": "handlebars {{trim \" ABC \"}} <!-- results in: 'ABC' --> ",
      "description": "<p>Removes extraneous whitespace from the beginning and end of a string.</p>\n"
    },
    "trimLeft": {
      "args": [
        "string"
      ],
      "numArgs": 1,
      "example": "handlebars {{trim \" ABC \"}} <!-- results in: 'ABC ' --> ",
      "description": "<p>Removes extraneous whitespace from the beginning of a string.</p>\n"
    },
    "trimRight": {
      "args": [
        "string"
      ],
      "numArgs": 1,
      "example": "handlebars {{trimRight \" ABC \"}} <!-- results in: ' ABC' --> ",
      "description": "<p>Removes extraneous whitespace from the end of a string.</p>\n"
    },
    "truncate": {
      "args": [
        "str",
        "limit",
        "suffix"
      ],
      "numArgs": 3,
      "example": "handlebars truncate(\"foo bar baz\", 7); <!-- results in: 'foo bar' --> truncate(sanitize(\"<span>foo bar baz</span>\", 7)); <!-- results in: 'foo bar' --> ",
      "description": "<p>Truncate a string to the specified <code>length</code>. Also see <a href=\"#ellipsis\">ellipsis</a>.</p>\n"
    },
    "truncateWords": {
      "args": [
        "str",
        "limit",
        "suffix"
      ],
      "numArgs": 3,
      "example": "handlebars truncateWords(\"foo bar baz\", 1); <!-- results in: 'foo…' --> truncateWords(\"foo bar baz\", 2); <!-- results in: 'foo bar…' --> truncateWords(\"foo bar baz\", 3); <!-- results in: 'foo bar baz' --> ",
      "description": "<p>Truncate a string to have the specified number of words. Also see <a href=\"#truncate\">truncate</a>.</p>\n"
    },
    "upcase": {
      "args": [
        "string"
      ],
      "numArgs": 1,
      "example": "handlebars {{upcase \"aBcDeF\"}} <!-- results in: 'ABCDEF' --> ",
      "description": "<p>Uppercase all of the characters in the given string. Alias for <a href=\"#uppercase\">uppercase</a>.</p>\n"
    },
    "uppercase": {
      "args": [
        "str",
        "options"
      ],
      "numArgs": 2,
      "example": "handlebars {{uppercase \"aBcDeF\"}} <!-- results in: 'ABCDEF' --> ",
      "description": "<p>Uppercase all of the characters in the given string. If used as a block helper it will uppercase the entire block. This helper does not support inverse blocks.</p>\n"
    }
  },
  "comparison": {
    "and": {
      "args": [
        "a",
        "b",
        "options"
      ],
      "numArgs": 3,
      "example": "handlebars <!-- {great: true, magnificent: true} --> {{#and great magnificent}}A{{else}}B{{/and}} <!-- results in: 'A' --> ",
      "description": "<p>Helper that renders the block if <strong>both</strong> of the given values are truthy. If an inverse block is specified it will be rendered when falsy. Works as a block helper, inline helper or subexpression.</p>\n"
    },
    "compare": {
      "args": [
        "a",
        "operator",
        "b",
        "options"
      ],
      "numArgs": 4,
      "description": "<p>Render a block when a comparison of the first and third arguments returns true. The second argument is the [arithemetic operator][operators] to use. You may also optionally specify an inverse block to render when falsy.</p>\n"
    },
    "contains": {
      "args": [
        "collection",
        "value",
        "[startIndex=0]",
        "options"
      ],
      "numArgs": 4,
      "example": "handlebars <!-- array = ['a', 'b', 'c'] --> {{#contains array \"d\"}} This will not be rendered. {{else}} This will be rendered. {{/contains}} ",
      "description": "<p>Block helper that renders the block if <code>collection</code> has the given <code>value</code>, using strict equality (<code>===</code>) for comparison, otherwise the inverse block is rendered (if specified). If a <code>startIndex</code> is specified and is negative, it is used as the offset from the end of the collection.</p>\n"
    },
    "default": {
      "args": [
        "value",
        "defaultValue"
      ],
      "numArgs": 2,
      "description": "<p>Returns the first value that is not undefined, otherwise the &quot;default&quot; value is returned.</p>\n"
    },
    "eq": {
      "args": [
        "a",
        "b",
        "options"
      ],
      "numArgs": 3,
      "description": "<p>Block helper that renders a block if <code>a</code> is <strong>equal to</strong> <code>b</code>. If an inverse block is specified it will be rendered when falsy. You may optionally use the <code>compare=&quot;&quot;</code> hash argument for the second value.</p>\n"
    },
    "gt": {
      "args": [
        "a",
        "b",
        "options"
      ],
      "numArgs": 3,
      "description": "<p>Block helper that renders a block if <code>a</code> is <strong>greater than</strong> <code>b</code>. If an inverse block is specified it will be rendered when falsy. You may optionally use the <code>compare=&quot;&quot;</code> hash argument for the second value.</p>\n"
    },
    "gte": {
      "args": [
        "a",
        "b",
        "options"
      ],
      "numArgs": 3,
      "description": "<p>Block helper that renders a block if <code>a</code> is <strong>greater than or equal to</strong> <code>b</code>. If an inverse block is specified it will be rendered when falsy. You may optionally use the <code>compare=&quot;&quot;</code> hash argument for the second value.</p>\n"
    },
    "has": {
      "args": [
        "val",
        "pattern",
        "options"
      ],
      "numArgs": 3,
      "description": "<p>Block helper that renders a block if <code>value</code> has <code>pattern</code>. If an inverse block is specified it will be rendered when falsy.</p>\n"
    },
    "isFalsey": {
      "args": [
        "val",
        "options"
      ],
      "numArgs": 2,
      "description": "<p>Returns true if the given <code>value</code> is falsey. Uses the [falsey][] library for comparisons. Please see that library for more information or to report bugs with this helper.</p>\n"
    },
    "isTruthy": {
      "args": [
        "val",
        "options"
      ],
      "numArgs": 2,
      "description": "<p>Returns true if the given <code>value</code> is truthy. Uses the [falsey][] library for comparisons. Please see that library for more information or to report bugs with this helper.</p>\n"
    },
    "ifEven": {
      "args": [
        "number",
        "options"
      ],
      "numArgs": 2,
      "example": "handlebars {{#ifEven value}} render A {{else}} render B {{/ifEven}} ",
      "description": "<p>Return true if the given value is an even number.</p>\n"
    },
    "ifNth": {
      "args": [
        "a",
        "b",
        "options"
      ],
      "numArgs": 3,
      "description": "<p>Conditionally renders a block if the remainder is zero when <code>a</code> operand is divided by <code>b</code>. If an inverse block is specified it will be rendered when the remainder is <strong>not zero</strong>.</p>\n"
    },
    "ifOdd": {
      "args": [
        "value",
        "options"
      ],
      "numArgs": 2,
      "example": "handlebars {{#ifOdd value}} render A {{else}} render B {{/ifOdd}} ",
      "description": "<p>Block helper that renders a block if <code>value</code> is <strong>an odd number</strong>. If an inverse block is specified it will be rendered when falsy.</p>\n"
    },
    "is": {
      "args": [
        "a",
        "b",
        "options"
      ],
      "numArgs": 3,
      "description": "<p>Block helper that renders a block if <code>a</code> is <strong>equal to</strong> <code>b</code>. If an inverse block is specified it will be rendered when falsy. Similar to <a href=\"#eq\">eq</a> but does not do strict equality.</p>\n"
    },
    "isnt": {
      "args": [
        "a",
        "b",
        "options"
      ],
      "numArgs": 3,
      "description": "<p>Block helper that renders a block if <code>a</code> is <strong>not equal to</strong> <code>b</code>. If an inverse block is specified it will be rendered when falsy. Similar to <a href=\"#unlesseq\">unlessEq</a> but does not use strict equality for comparisons.</p>\n"
    },
    "lt": {
      "args": [
        "context",
        "options"
      ],
      "numArgs": 2,
      "description": "<p>Block helper that renders a block if <code>a</code> is <strong>less than</strong> <code>b</code>. If an inverse block is specified it will be rendered when falsy. You may optionally use the <code>compare=&quot;&quot;</code> hash argument for the second value.</p>\n"
    },
    "lte": {
      "args": [
        "a",
        "b",
        "options"
      ],
      "numArgs": 3,
      "description": "<p>Block helper that renders a block if <code>a</code> is <strong>less than or equal to</strong> <code>b</code>. If an inverse block is specified it will be rendered when falsy. You may optionally use the <code>compare=&quot;&quot;</code> hash argument for the second value.</p>\n"
    },
    "neither": {
      "args": [
        "a",
        "b",
        "options"
      ],
      "numArgs": 3,
      "description": "<p>Block helper that renders a block if <strong>neither of</strong> the given values are truthy. If an inverse block is specified it will be rendered when falsy.</p>\n"
    },
    "not": {
      "args": [
        "val",
        "options"
      ],
      "numArgs": 2,
      "description": "<p>Returns true if <code>val</code> is falsey. Works as a block or inline helper.</p>\n"
    },
    "or": {
      "args": [
        "arguments",
        "options"
      ],
      "numArgs": 2,
      "example": "handlebars {{#or a b c}} If any value is true this will be rendered. {{/or}} ",
      "description": "<p>Block helper that renders a block if <strong>any of</strong> the given values is truthy. If an inverse block is specified it will be rendered when falsy.</p>\n"
    },
    "unlessEq": {
      "args": [
        "a",
        "b",
        "options"
      ],
      "numArgs": 3,
      "description": "<p>Block helper that always renders the inverse block <strong>unless <code>a</code> is equal to <code>b</code></strong>.</p>\n"
    },
    "unlessGt": {
      "args": [
        "a",
        "b",
        "options"
      ],
      "numArgs": 3,
      "description": "<p>Block helper that always renders the inverse block <strong>unless <code>a</code> is greater than <code>b</code></strong>.</p>\n"
    },
    "unlessLt": {
      "args": [
        "a",
        "b",
        "options"
      ],
      "numArgs": 3,
      "description": "<p>Block helper that always renders the inverse block <strong>unless <code>a</code> is less than <code>b</code></strong>.</p>\n"
    },
    "unlessGteq": {
      "args": [
        "a",
        "b",
        "options"
      ],
      "numArgs": 3,
      "description": "<p>Block helper that always renders the inverse block <strong>unless <code>a</code> is greater than or equal to <code>b</code></strong>.</p>\n"
    },
    "unlessLteq": {
      "args": [
        "a",
        "b",
        "options"
      ],
      "numArgs": 3,
      "description": "<p>Block helper that always renders the inverse block <strong>unless <code>a</code> is less than or equal to <code>b</code></strong>.</p>\n"
    }
  },
  "date": {
    "date": {
      "args": [
        "datetime",
        "format"
      ],
      "numArgs": 2,
      "example": "{{date now \"YYYY\"}}",
      "description": "<p>Format a date using moment.js data formatting.</p>\n"
    }
  }
}
